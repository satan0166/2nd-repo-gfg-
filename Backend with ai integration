import streamlit as st
import re

class HealthPulse:
    def __init__(self):
        self.name = ""
        self.age = 0
        self.body_weight = 0.0
        self.height = 0.0
        self.target_weight = 0.0
        self.daily_calorie_intake = 0.0
        self.daily_calories_burned = 0.0
        self.net_calorie_intake = 0.0
        self.bmi_category = ""
        self.diet_plan = []
        self.workout_plan = []
        self.worked_out = False
        self.food_calories = {}
        self.username = ""
        self.password = ""
        self.diet_plan_instance = DietPlan()

    def view_diet_plan(self):
        st.write("Diet Plan:")
        for plan in self.diet_plan:
            st.write(plan)

    def view_workout_plan(self):
        st.write("Workout Plan:")
        for plan in self.workout_plan:
            st.write(plan)

    def is_username_exists(self, username):
        try:
            with open("credentials.txt", "r") as credentials_file:
                for line in credentials_file:
                    stored_username, _ = line.strip().split(" ", 1)
                    if stored_username == username:
                        return True
        except FileNotFoundError:
            return False

    def calculate_calories_burned(self, exercise_type, exercise_duration):
        calories_burned_per_minute = {
            "Running": 11.4,
            "Cycling": 6.0,
            "Swimming": 7.6,
            "Jump Rope": 12.0,
            "Yoga": 2.5,
            "Weightlifting": 3.0,
            "HIIT": 8.0
        }

        if exercise_type in calories_burned_per_minute:
            return exercise_duration * (calories_burned_per_minute[exercise_type] / 30.0)
        else:
            st.write(f"Sorry, we don't have caloric information for {exercise_type}.")
            return 0.0

    def save_credentials(self, username, password):
        try:
            with open("credentials.txt", "a") as credentials_file:
                credentials_file.write(f"{username} {password}\n")
        except IOError:
            st.write("Unable to save user credentials.")

    def register_user(self):
        st.write("Register a new user:")
        new_username = st.text_input("Create a username")

        if self.is_username_exists(new_username):
            st.write("Username already exists. Please choose a different username.")
            return

        new_password = st.text_input("Create a password", type="password")
        confirm_password = st.text_input("Confirm your password", type="password")

        if new_password != confirm_password:
            st.write("Passwords do not match. Please try again.")
            return

        if not self.is_valid_password(new_password):
            st.write("Invalid password. Make sure it contains at least one capital letter, one special character, one number, and has a minimum length of 8 characters.")
            return

        self.save_credentials(new_username, new_password)
        st.write("Registration successful! You can now login.")

    def is_valid_password(self, password):
        return re.search(r'^(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()-_+=])[a-zA-Z0-9!@#$%^&*()-_+=]{8,}$', password) is not None

    def login(self):
        st.write("Login to HealthPulse:")
        self.username = st.text_input("Enter your username")
        self.password = st.text_input("Enter your password", type="password")
        if st.button("Login"):
            if self.validate_credentials(self.username, self.password):
                st.write("Login successful!")
                return True
            else:
                st.write("Invalid credentials. Please try again.")
                return False

    def validate_credentials(self, username, password):
        try:
            with open("credentials.txt", "r") as credentials_file:
                for line in credentials_file:
                    stored_username, stored_password = line.strip().split(" ", 1)
                    if stored_username == username and stored_password == password:
                        return True
        except FileNotFoundError:
            return False

    def load_user_data(self):
        try:
            with open("user_data.txt", "r") as in_file:
                self.name = in_file.readline().strip()
                self.age, self.body_weight, self.height, self.target_weight, self.daily_calorie_intake, \
                    self.daily_calories_burned, self.net_calorie_intake = map(float, in_file.readline().split())
                self.bmi_category = in_file.readline().strip()
                self.worked_out = bool(int(in_file.readline().strip()))

                diet_plan_size = int(in_file.readline().strip())
                self.diet_plan = [in_file.readline().strip() for _ in range(diet_plan_size)]

                workout_plan_size = int(in_file.readline().strip())
                self.workout_plan = [in_file.readline().strip() for _ in range(workout_plan_size)]

        except FileNotFoundError:
            st.write("No saved user data found. Starting fresh.")

    def welcome_message(self):
        st.write("Welcome to HealthPulse!")
        st.write("Embark on a journey to better health and well-being.")
        st.write("Let's get started on your personalized health and fitness plan.")
        self.name = st.text_input("Please enter your name")

    def suggest_water_intake(self):
        if self.bmi_category is None:
            st.write("Calculate BMI first to get accurate water intake suggestions.")
            return

        weight_kg = float(st.text_input("Enter your body weight in kilograms", key="weight_kg"))
        daily_water_intake = round(weight_kg * 0.03, 2)

        st.write("Hydration Recommendation:")
        st.write(f"Drink at least {daily_water_intake} liters of water daily.")


class DietPlan:
    def __init__(self):
        self.fitness_level = ""
        self.height = 0.0
        self.body_weight = 0.0
        self.bmi_category = ""

    def choose_fitness_level(self):
        attempt = 0
        while attempt < 3:
            st.write("Choose your fitness level:")
            choice = st.selectbox("Fitness level", ["Select", "Beginner", "Intermediate", "Advanced"])

            if choice == "Beginner":
                self.fitness_level = "beginner"
                st.write("Cheers to new beginnings! You're officially a fitness explorer. Let's start this adventure together!")
                self.suggest_diet_plan()
                break

            elif choice == "Intermediate":
                self.fitness_level = "intermediate"
                st.write("Your dedication is paying off, and the best is yet to come.")
                self.suggest_diet_plan()
                break

            elif choice == "Advanced":
                self.fitness_level = "advanced"
                st.write("You're an advanced fitness warrior now! Your commitment is inspiring. Get ready to take your fitness game to the next level!")
                self.suggest_diet_plan()
                break

            else:
                st.write("Invalid choice. Please choose a valid option.")
                attempt += 1

        if attempt == 3:
            st.write("You have exceeded the maximum number of attempts. Kindly choose from the given options.")
            self.choose_fitness_level()

    def calculate_bmi(self):
        st.write("Let's calculate your Body Mass Index (BMI).")

        self.height = float(st.text_input("Enter your height in meters", key="height"))
        self.body_weight = float(st.text_input("Enter your weight in kilograms", key="body_weight"))

        bmi = self.body_weight / (self.height ** 2)

        if bmi < 18.5:
            self.bmi_category = "Underweight"
        elif 18.5 <= bmi < 25:
            self.bmi_category = "Normal weight"
        elif 25 <= bmi < 30:
            self.bmi_category = "Overweight"
        else:
            self.bmi_category = "Obese"

        st.write("Body Mass Index (BMI) Calculation:")
        st.write(f"BMI: {bmi:.2f}")
        st.write(f"Category: {self.bmi_category}")

    def suggest_diet_plan(self):
        st.write("Diet Plan Suggestions based on BMI: Please note that these are just examples, and actual dietary recommendations should be personalized and consulted with a healthcare professional or a nutritionist.")
        if self.bmi_category == "Underweight":
            self.suggest_underweight_diet_plan()
        elif self.bmi_category == "Normal weight":
            self.suggest_normal_weight_diet_plan()
        elif self.bmi_category == "Overweight":
            self.suggest_overweight_diet_plan()
        else:
            self.suggest_obese_diet_plan()

    def suggest_underweight_diet_plan(self):
        st.write("You are underweight.ðŸ˜Š Let's work on adding some healthy goodness to your diet to help you soar to new heights! ðŸš€ Here's a suggested diet plan:")
        self.underweight_diet_plan_preference()

    def suggest_normal_weight_diet_plan(self):
        st.write("You are in the normal weight range.ðŸ˜Š Let's work on adding some healthy goodness to your diet to help you soar to new heights! ðŸš€ Here's a suggested diet plan:")
        self.normal_weight_diet()

    def suggest_overweight_diet_plan(self):
        st.write("You are overweight.ðŸ˜Š Let's work on adding some healthy goodness to your diet to help you soar to new heights! ðŸš€ Here's a suggested diet plan:")
        self.overweight_diet()

    def suggest_obese_diet_plan(self):
        st.write("You are in the obese range.ðŸ˜Š Let's work on adding some healthy goodness to your diet to help you soar to new heights! ðŸš€ Here's a suggested diet plan:")
        st.write("It's important to consult with a healthcare professional or a nutritionist for a personalized diet plan to manage obesity.")

    def underweight_diet_plan_preference(self):
        preference_choice = st.selectbox("Choose your dietary preference", ["Select", "Vegetarian", "Non-vegetarian"])

        if preference_choice == "Vegetarian":
            self.vegetarian_diet_plan()
        elif preference_choice == "Non-vegetarian":
            self.non_vegetarian_diet_plan()
        else:
            st.write("Invalid choice. Please choose a valid option.")

    def vegetarian_diet_plan(self):
        st.write("Underweight Vegetarian Diet Plan:")
        st.write("Here's a sample plan to help you get started:")
        st.write("â€¢ Breakfast: Smoothie with bananas, yogurt, and nuts.")
        st.write("â€¢ Lunch: Quinoa salad with chickpeas, mixed greens, and avocado.")
        st.write("â€¢ Snack: Greek yogurt with honey and mixed berries.")
        st.write("â€¢ Dinner: Lentil stew with sweet potatoes and spinach.")
        st.write("â€¢ Snack: Almond butter on whole-grain toast.")

    def non_vegetarian_diet_plan(self):
        st.write("Underweight Non-vegetarian Diet Plan:")
        st.write("Here's a sample plan to help you get started:")
        st.write("â€¢ Breakfast: Scrambled eggs with whole-grain toast and avocado.")
        st.write("â€¢ Lunch: Grilled chicken breast with brown rice and vegetables.")
        st.write("â€¢ Snack: Cottage cheese with pineapple chunks.")
        st.write("â€¢ Dinner: Salmon fillet with quinoa and steamed broccoli.")
        st.write("â€¢ Snack: Protein shake with banana and almond milk.")

    def normal_weight_diet(self):
        st.write("Normal Weight Diet Plan:")
        st.write("Here's a sample plan to help you get started:")
        st.write("â€¢ Breakfast: Greek yogurt with honey and mixed berries.")
        st.write("â€¢ Lunch: Quinoa salad with chickpeas, mixed greens, and avocado.")
        st.write("â€¢ Snack: Greek yogurt with honey and mixed berries.")
        st.write("â€¢ Dinner: Lentil stew with sweet potatoes and spinach.")
        st.write("â€¢ Snack: Almond butter on whole-grain toast.")

    def overweight_diet(self):
        st.write("Overweight Diet Plan:")
        st.write("Here's a sample plan to help you get started:")
        st.write("â€¢ Breakfast: Greek yogurt with honey and mixed berries.")
        st.write("â€¢ Lunch: Quinoa salad with chickpeas, mixed greens, and avocado.")
        st.write("â€¢ Snack: Greek yogurt with honey and mixed berries.")
        st.write("â€¢ Dinner: Lentil stew with sweet potatoes and spinach.")
        st.write("â€¢ Snack: Almond butter on whole-grain toast.")

def main():
    user = HealthPulse()
    user.load_user_data()
    user.welcome_message()
    user.suggest_water_intake()

    st.write("You can choose from the following options:")
    choice = st.selectbox("Choose an option", ["Select", "Register", "Login"])

    if choice == "Register":
        user.register_user()
    elif choice == "Login":
        if user.login():
            st.write("Login successful!")
            user.diet_plan_instance.choose_fitness_level()
            user.diet_plan_instance.calculate_bmi()
            user.diet_plan_instance.suggest_diet_plan()

            user.view_diet_plan()
            user.view_workout_plan()
        else:
            st.write("Invalid credentials. Please try again.")

if __name__ == "__main__":
    main()
