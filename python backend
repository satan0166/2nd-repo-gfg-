import math

class HealthPulse:
    def __init__(self):
        self.name = ""
        self.age = 0
        self.bodyweight = 0.0
        self.height = 0.0
        self.targetWeight = 0.0
        self.dailyCalorieIntake = 0.0
        self.dailyCaloriesBurned = 0.0
        self.netCalorieIntake = 0.0
        self.bmiCategory = ""
        self.dietPlan = []
        self.workoutPlan = []
        self.workedOut = False
        self.foodCalories = {}
        self.username = ""
        self.password = ""

        self.initialize_food_calories()
        self.estimate_time_to_target_weight()

    def is_username_exists(self, username):
        try:
            with open("credentials.txt", "r") as credentials_file:
                for line in credentials_file:
                    stored_username, _ = line.strip().split(" ", 1)
                    if stored_username == username:
                        return True
        except FileNotFoundError:
            return False

    def save_credentials(self, username, password):
        try:
            with open("credentials.txt", "a") as credentials_file:
                credentials_file.write(f"{username} {password}\n")
        except IOError:
            print("Unable to save user credentials.")

    def register_user(self):
        
      print("Register a new user:")
      new_username = input("Create a username: ")

      if self.is_username_exists(new_username):
          print("Username already exists. Please choose a different username.")
          self.register_user()
          return
  

      while True:
          new_password = input("Create a password: ")
          confirm_password = input("Confirm your password: ")

          if new_password == confirm_password:
              break
          else:
              print("Passwords do not match. Please try again.")

      self.save_credentials(new_username, new_password)

    def login(self):
        print("Login to HealthPulse:")
        self.username = input("Enter your username: ")
        self.password = input("Enter your password: ")
        return self.validate_credentials(self.username, self.password)

    def validate_credentials(self, username, password):
        try:
            with open("credentials.txt", "r") as credentials_file:
                for line in credentials_file:
                    stored_username, stored_password = line.strip().split(" ", 1)
                    if stored_username == username and stored_password == password:
                        return True
        except FileNotFoundError:
            return False

    def save_user_data(self):
        try:
            with open("user_data.txt", "w") as out_file:
                out_file.write(f"{self.name}\n")
                out_file.write(f"{self.age}\n")
                out_file.write(f"{self.bodyweight}\n")
                out_file.write(f"{self.height}\n")
                out_file.write(f"{self.targetWeight}\n")
                out_file.write(f"{self.dailyCalorieIntake}\n")
                out_file.write(f"{self.dailyCaloriesBurned}\n")
                out_file.write(f"{self.netCalorieIntake}\n")
                out_file.write(f"{self.bmiCategory}\n")
                out_file.write(f"{self.workedOut}\n")

                out_file.write(f"{len(self.dietPlan)}\n")
                for plan in self.dietPlan:
                    out_file.write(f"{plan}\n")

                out_file.write(f"{len(self.workoutPlan)}\n")
                for plan in self.workoutPlan:
                    out_file.write(f"{plan}\n")

        except IOError:
            print("Unable to save user data to file.")

    def load_user_data(self):
        try:
            with open("user_data.txt", "r") as in_file:
                self.name = in_file.readline().strip()
                self.age, self.bodyweight, self.height, self.targetWeight, self.dailyCalorieIntake, \
                    self.dailyCaloriesBurned, self.netCalorieIntake = map(float, in_file.readline().split())
                self.bmiCategory = in_file.readline().strip()
                self.workedOut = bool(int(in_file.readline().strip()))

                diet_plan_size = int(in_file.readline().strip())
                self.dietPlan = [in_file.readline().strip() for _ in range(diet_plan_size)]

                workout_plan_size = int(in_file.readline().strip())
                self.workoutPlan = [in_file.readline().strip() for _ in range(workout_plan_size)]

        except FileNotFoundError:
            print("No saved user data found. Starting fresh.")

    def estimate_time_to_target_weight(self):
        calories_per_kg = 7700.0
        weight_change_calories = abs(self.targetWeight - self.bodyweight) * calories_per_kg

        if self.netCalorieIntake != 0:
            estimated_days = weight_change_calories / abs(self.netCalorieIntake)

            print("\nEstimated time to achieve target weight: ", end="")
            if self.netCalorieIntake > 0:
                print("Losing ", end="")
            else:
                print("Gaining ", end="")

            print(f"{abs(self.targetWeight - self.bodyweight)} kg", end="")

            if estimated_days < 7:
                print(" in less than a week.")
            else:
                estimated_weeks = int(estimated_days / 7)
                print(f" in approximately {estimated_weeks} weeks.")
            print()

    def welcome_message(self):
        print("Welcome to HealthPulse!")
        print("Embark on a journey to better health and well-being.")
        print("Let's get started on your personalized health and fitness plan.")
        self.name = input("Please enter your name: ")

    def provide_calorie_recommendation(self):
        calorie_deficit_threshold = 500.0
        calorie_deficit = (self.targetWeight - self.bodyweight) * 7700.0 / 1000.0

        if self.targetWeight < self.bodyweight:
            # User wants to lose weight
            lower_threshold = calorie_deficit - calorie_deficit_threshold
            upper_threshold = calorie_deficit + calorie_deficit_threshold

            if self.netCalorieIntake < lower_threshold:
                print("Your current daily calorie intake may be too low for a healthy weight loss. "
                      "Consider increasing your calorie intake.")
            elif self.netCalorieIntake > upper_threshold:
                print("Your current daily calorie intake may be too high for a healthy weight loss. "
                      "Consider reducing your calorie intake.")
            else:
                print("Your daily calorie intake is within a healthy range for your weight loss goal. "
                      "Keep up the good work!")
        elif self.targetWeight > self.bodyweight:
            # User wants to gain weight
            lower_threshold = calorie_deficit - calorie_deficit_threshold
            upper_threshold = calorie_deficit + calorie_deficit_threshold

            if self.netCalorieIntake < lower_threshold:
                print("Your current daily calorie intake may be too low for a healthy weight gain. "
                      "Consider increasing your calorie intake.")
            elif self.netCalorieIntake > upper_threshold:
                print("Your current daily calorie intake may be too high for a healthy weight gain. "
                      "Consider reducing your calorie intake.")
            else:
                print("Your daily calorie intake is within a healthy range for your weight gain goal. "
                      "Keep up the good work!")
        else:
            # User wants to maintain current weight
            lower_threshold = calorie_deficit - calorie_deficit_threshold
            upper_threshold = calorie_deficit + calorie_deficit_threshold

            if self.netCalorieIntake < lower_threshold:
                print("Your current daily calorie intake may be too low for maintaining your weight. "
                      "Consider increasing your calorie intake.")
            elif self.netCalorieIntake > upper_threshold:
                print("Your current daily calorie intake may be too high for maintaining your weight. "
                      "Consider reducing your calorie intake.")
            else:
                print("Your daily calorie intake is within a healthy range for maintaining your current weight. "
                      "Keep up the good work!")

    def calculate_bmi(self):
        # BMI formula: weight (kg) / (height (m))^2
        height_in_meters = self.height / 100.0
        bmi = self.bodyweight / (height_in_meters ** 2)

        if bmi < 18.5:
            self.bmiCategory = "Underweight"
        elif 18.5 <= bmi < 25:
            self.bmiCategory = "Normal weight"
        elif 25 <= bmi < 30:
            self.bmiCategory = "Overweight"
        else:
            self.bmiCategory = "Obese"

        print("\nBody Mass Index (BMI) Calculation:")
        print("BMI: {:.2f}".format(bmi))
        print("Category: {}".format(self.bmiCategory))

    def initialize_food_calories(self):
        # Caloric values are for 100g servings
        self.foodCalories = {
           "Apple": 52.0,
        "Banana": 89.0,
        "Orange": 43.0,
        "Chicken Breast": 165.0,
        "Salmon": 206.0,
        "Broccoli": 55.0,
        "Carrot": 41.0,
        "Potato": 77.0,
        "Brown Rice": 123.0,
        "Quinoa": 120.0,
        "Egg": 143.0,
        "Milk": 42.0,
        "Almonds": 576.0,
        "Avocado": 160.0,
        "Olive Oil": 884.0,
        "Yogurt": 59.0,
        "Cheese": 402.0,
        "Bread": 265.0,
        "Pasta": 131.0,
        "Chocolate": 546.0,
        "Ice Cream": 207.0,
        "Soda": 41.0,
        "Coffee": 2.0,
        "Tea": 1.0,
        "Water": 0.0,
        "Spinach": 23.0,
        "Tomato": 18.0,
        "Cucumber": 16.0,
        "Strawberries": 32.0,
        "Blueberries": 57.0,
        "Ground Beef": 250.0,
        "Shrimp": 99.0,
        "Sweet Potato": 86.0,
        "Lentils": 116.0,
        "Peanut Butter": 588.0,
        "Honey": 304.0,
        "Quinoa": 120.0,
        "Greek Yogurt": 59.0,
        "Chia Seeds": 486.0,
        "Dark Chocolate": 546.0,
        "Green Tea": 1.0,
        "Coconut Water": 19.0
        }

    def log_food_intake(self):
        print("\nFood Log:")
        food_item = input("Enter the name of the food item you consumed: ")

        if food_item in self.foodCalories:
            serving_size = float(input(f"Enter the serving size in grams for {food_item}: "))
            calories_consumed = (serving_size / 100.0) * self.foodCalories[food_item]
            self.netCalorieIntake += calories_consumed
            print(f"You consumed {calories_consumed:.2f} calories from {food_item}.")
        else:
            print(f"Sorry, we don't have caloric information for {food_item}.")

    def log_exercise(self):
        print("\nExercise Log:")
        exercise_type = input("Enter the type of exercise you performed: ")
        exercise_duration = float(input("Enter the duration of the exercise in minutes: "))

        calories_burned = self.calculate_calories_burned(exercise_type, exercise_duration)
        self.netCalorieIntake -= calories_burned

        print(f"You burned {calories_burned:.2f} calories with {exercise_type}.")

    def calculate_calories_burned(self, exercise_type, exercise_duration):
        # Caloric values are estimated for 30 minutes of activity
        calories_burned_per_minute = {
            "Running": 11.4,
            "Cycling": 6.0,
            "Swimming": 7.6,
            "Jump Rope": 12.0,
            "Yoga": 2.5,
            "Weightlifting": 3.0,
            "HIIT": 8.0
        }

        if exercise_type in calories_burned_per_minute:
            return exercise_duration * (calories_burned_per_minute[exercise_type] / 30.0)
        else:
            print(f"Sorry, we don't have caloric information for {exercise_type}.")
            return 0.0

    def display_menu(self):
        print("\nHealthPulse Menu:")
        print("1. Log Food Intake")
        print("2. Log Exercise")
        print("3. View BMI and Weight Status")
        print("4. View Caloric Recommendation")
        print("5. View Estimated Time to Target Weight")
        print("6. View Diet Plan")
        print("7. View Workout Plan")
        print("8. Save and Exit")

    def execute_menu_option(self, option):
        if option == 1:
            self.log_food_intake()
        elif option == 2:
            self.log_exercise()
        elif option == 3:
            self.calculate_bmi()
        elif option == 4:
            self.provide_calorie_recommendation()
        elif option == 5:
            self.estimate_time_to_target_weight()
        elif option == 6:
            self.view_diet_plan()
        elif option == 7:
            self.view_workout_plan()
        elif option == 8:
            self.save_user_data()
            print("Data saved. Exiting HealthPulse.")
            exit()
        else:
            print("Invalid option. Please choose a valid option.")

    def view_diet_plan(self):
        print("\nDiet Plan:")
        for plan in self.dietPlan:
            print(plan)

    def view_workout_plan(self):
        print("\nWorkout Plan:")
        for plan in self.workoutPlan:
            print(plan)


def main():
    health_pulse = HealthPulse()
    print("\nWelcome to HealthPulse!")
    while True:
      print("1. Sign In")
      print("2. Sign Up")
      print("3. Exit")

      try:
          choice = int(input("Enter your choice (1-3): "))
    
          if choice == 1:
              # Sign In
              login_attempt = 0
              while login_attempt < 3:
                  if health_pulse.login():
                      break
                  else:
                      print("Invalid username or password. Please try again.")
                      login_attempt += 1
    
              if login_attempt == 3:
                  print("Too many login attempts. Returning to the main menu.")
              else:
                  health_pulse.load_user_data()
    
                  if not health_pulse.name:
                      print("User not found. Please sign up.")
                  else:
                      print(f"\nWelcome back, {health_pulse.name}!")
                      break  # Exit the loop and proceed to the main menu

          elif choice == 2:
              # Sign Up
              health_pulse.welcome_message()
              health_pulse.register_user()
              health_pulse.load_user_data()
              print(f"\nWelcome, {health_pulse.name}!")
              break  # Exit the loop and proceed to the main menu
    
          elif choice == 3:
              print("Exiting HealthPulse.")
              return
    
          else:
              print("Invalid choice. Please enter a number between 1 and 3.")
    
      except ValueError:
          print("Invalid input. Please enter a number.")
    

  
    while True:
        health_pulse.display_menu()
        try:
            user_option = int(input("Enter your choice (1-8): "))
            health_pulse.execute_menu_option(user_option)
        except ValueError:
            print("Invalid input. Please enter a number.")


if __name__ == "__main__":
    main()

